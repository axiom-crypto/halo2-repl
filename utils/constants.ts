export const DEFAULT_CODE = JSON.parse('"//   _    _       _      ___  _____  ______ _____  _      \\n//  | |  | |     | |    |__ \\\\|  __ \\\\|  ____|  __ \\\\| |     \\n//  | |__| | __ _| | ___   ) | |__) | |__  | |__) | |     \\n//  |  __  |/ _` | |/ _ \\\\ / /|  _  /|  __| |  ___/| |     \\n//  | |  | | (_| | | (_) / /_| | \\\\ \\\\| |____| |    | |____ \\n//  |_|  |_|\\\\__,_|_|\\\\___/____|_|  \\\\_\\\\______|_|    |______|  \\n//\\n\\nconst n = arr.length;\\nconst numBits = 4\\n\\nconst input = arr.map(witness);\\nconst start = witness(startIdx)\\nconst end = witness(endIdx)\\n\\nlet isz = [];\\nlet inRange = [];\\nconst diff = sub(end, start)\\nfor (let i = 0; i < n; i++) {\\n    const crossed = sub(diff, witness(i));\\n    isz.push(isZero(crossed))\\n    const xor = i == 0 ? witness(1) : mul(add(inRange[i - 1], isz[i]), sub(inRange[i - 1], isz[i]))\\n    inRange.push(xor)\\n}\\n\\nconst bits = numToBits(start, numBits);\\n\\nconst shifts = []\\n\\nfor (let i = 0; i < numBits; i++) {\\n    const shift = []\\n    if (i == 0) {\\n        for (let j = 0; j < n; j++) {\\n            let idx = (j + 1) % n;\\n            shift.push(mulAdd(bits[0], sub(input[idx], input[j]), input[j]))\\n        }\\n    }\\n    else {\\n        for (let j = 0; j < n; j++) {\\n            let temp = ((2 ** i) + j) % n;\\n            shift.push(mulAdd(bits[i], sub(shifts[i - 1][temp], shifts[i - 1][j]), shifts[i - 1][j]))\\n        }\\n    }\\n    shifts.push(shift)\\n}\\n\\nfor (let i = 0; i < n; i++) {\\n    const res = mul(inRange[i], shifts[numBits - 1][i])\\n    makePublic(res)\\n}\\n\\n// Have a better solution to this puzzle? We\'d love to chat!\\n// Send your solution to _.\\n"')
export const DEFAULT_INPUT = JSON.parse('"{\\n    \\"arr\\": [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],\\n    \\"startIdx\\": 6,\\n    \\"endIdx\\": 9\\n}"');